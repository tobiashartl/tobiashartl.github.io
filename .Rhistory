}
statistics2b
r <- c(1, 1000, 1e+05)
r
# Load ML esimates
results.list <- list()
statistics2 <- statistics2b <- matrix(NA, nrow(setups), 5)
for(i in 1:nrow(setups)){
true.par          <- setups[i, ]
try({
load(paste("./MC/MC_3/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics2[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d))
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statistics2b[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
}
statistics2b
r
rr <- c("1", "1000", "1e+05")
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
# Load CSS esimates
results.list <- list()
statistics <- statisticsb <- matrix(NA, nrow(setups), 11)
# Load ML esimates
results.list <- list()
statistics2 <- statistics2b <- matrix(NA, nrow(setups), 5)
rrr
true.par
true.par[3]
paste("./MC/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_ar_high_corr0.RData", sep="")
load(paste("./MC/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_ar_high_corr0.RData", sep=""))
i=3
true.par          <- setups[i, ]
true.par
statistics
for(i in 1:nrow(setups)){
true.par          <- setups[i, ]
try({
load(paste("./MC/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_ar_high_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- rowMeans((results.list[[i]][c("d", "d_45", "d_50", "d_55", "d_60", "d_65", "d_70"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- apply((results.list[[i]][c("d", "d_45", "d_50", "d_55", "d_60", "d_65", "d_70"), ] - true.par$d), 1, mean)
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statisticsb[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
}
statisticsb
# Load CSS esimates
results.list <- list()
statistics <- statisticsb <- matrix(NA, nrow(setups), 11)
for(i in 1:nrow(setups)){
true.par          <- setups[i, ]
try({
load(paste("./MC/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_ar_high_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- rowMeans((results.list[[i]][c("d", "d_45", "d_50", "d_55", "d_60", "d_65", "d_70"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- apply((results.list[[i]][c("d", "d_45", "d_50", "d_55", "d_60", "d_65", "d_70"), ] - true.par$d), 1, mean)
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statisticsb[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
}
gc()
rm(list = ls())
library(fUCpack)
library(dplyr)
# Wd, etc
setwd("/Users/tobias/Dokumente/Projekte/filtering unknown persistence/R/")
source("./help functions/KF.R")
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.25, 1.75)
r <- c(1, 1000, 1e+05)
R <- 1000
rr <- c("1", "1000", "1e+05")
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
# Load ML esimates
results.list <- list()
statistics2 <- statistics2b <- matrix(NA, nrow(setups), 5)
for(i in 1:nrow(setups)){
true.par          <- setups[i, ]
rrr <-
try({
load(paste("./MC/MC_3/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics2[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d))
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statistics2b[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
}
statistics2b
i=3
true.par          <- setups[i, ]
true.par
true.par          <- setups[i, ]
try({
load(paste("./MC/MC_3/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics2[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d))
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statistics2b[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
d <- c(0.75, 1, 1.75)
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.75)
r <- c(1, 1000, 1e+05)
R <- 1000
rr <- c("1", "1000", "1e+05")
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
# Load ML esimates
results.list <- list()
statistics2 <- statistics2b <- matrix(NA, nrow(setups), 5)
for(i in 1:nrow(setups)){
true.par          <- setups[i, ]
try({
load(paste("./MC/MC_3/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics2[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d))
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statistics2b[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
}
statistics2b
statistics2
rownames(statistics2) <- rownames(statistics2b) <- apply(setups[,], 1, function(x) paste(x, collapse="_"))
colnames(statistics2) <- colnames(statistics2b) <- c("d_ML",
"nu_ML", "Rsq_ML", "ar1_ML", "ar2_ML" )
statistics2
statistics2b
gc()
rm(list = ls())
library(fUCpack)
library(dplyr)
# Wd, etc
setwd("/Users/tobias/Dokumente/Projekte/filtering unknown persistence/R/")
source("./help functions/KF.R")
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.75)
r <- c(1, 1000, 1e+05)
R <- 1000
rr <- c("1", "1000", "1e+05")
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
# Load CSS esimates
results.list <- list()
statistics <- statisticsb <- matrix(NA, nrow(setups), 11)
# Settings
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.75)
r <- c(1, 1000, 100000)
R <- 1000
# Strong persistence
ar <- c(-1.6, 0.8)
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
# Load ML esimates
results.list <- list()
statistics2 <- statistics2b <- matrix(NA, nrow(setups), 5)
i=1
true.par          <- setups[i, ]
try({
load(paste("./MC/MC_3/Sim_R1000_n", true.par[1], "_d", true.par[2], "_nu", true.par[3],
"_corr0.RData", sep=""))
results.list[[i]] <- RESULTS
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d)^2) %>%
sqrt(.)
MSE_ar <- rowMeans((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8))^2)%>%
sqrt(.)
#SSR   <- mean(results.list[[i]][c("SSR"), ])
Rsq   <- mean(results.list[[i]][c("Rsq"), ])
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r)^2) %>%
sqrt(.)
statistics2[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
MSE_d <- mean((results.list[[i]][c("d"), ] - true.par$d))
MSE_ar <- -apply((results.list[[i]][c("ar_1", "ar_2"), ] - c(-1.6, 0.8)), 1, mean)
MSE_nu <- mean((results.list[[i]][c("nu"), ] - true.par$r))
statistics2b[i, ] <- c(MSE_d, MSE_nu, Rsq, MSE_ar)
})
RESULTS
load("~/Dokumente/Projekte/Filtering unknown persistence/R/MC/MC_3/Sim_R1000_n100_d0.75_nu1_corr0.RData")
RESULTS
load("~/Dokumente/Projekte/Filtering unknown persistence/R/code/MC/ML/Sim_R1000_n100_d0.75_nu1_ar_high_corr0.RData")
RESULTS
# Simulation:
# Performance of fUC for parameter estimation
#   - High and normal signal to noise ratios
#   - AR plus non-AR
#   - compare d with other nonparametric estimators
gc()
rm(list = ls())
library(fUCpack)
library(dplyr)
library(parallel)
# Wd, etc
setwd("~/Dokumente/Projekte/filtering unknown persistence/R")
#setwd("/Users/tobias/Dokumente/Projekte/filtering unknown persistence/R/")
#source("./help functions/help_functions.R")
source("./help functions/KF.R")
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.25, 1.75)
r <- c(1, 5, 10)
R <- 1000
# Strong persistence
ar <- c(-1.6, 0.8)
# define grid
d.grid <- seq(0.75, 1.75, 0.25)
r.grid <- log(c(1, 5, 10))
ar.1.grid <- c(-1.8, -1.7, -1.6, -1.5, -1.4)
ar2.grid  <- c(0.6, 0.7, 0.8, 0.9, 1)
gr.start <- expand.grid(d.grid, r.grid, ar.1.grid, ar2.grid) %>% as.matrix()
gr.start <- gr.start[sapply(1:nrow(gr.start), function(i) toComp(-c(gr.start[i, 3:4]))$stable) ,]
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
i=1
setup <- setups[ i, ]
n <- as.numeric(setup[1])
nu <- as.numeric(setup[3])
d <- as.numeric(setup[2])
cat("Iteration ", i, "\n")
#if(file.exists(file = paste("./MC/MC_2/ML/Sim_R", R, "_n", n, "_d", d, "_nu", nu, "_ar_high.RData", sep=""))) next
set.seed(42)
# Generate the data
x <- frac_diff_multi(matrix(rnorm(n*R, mean=0, sd=1), n, R), -d)
u <- matrix(rnorm(n*R, mean=0, sd=sqrt(nu)), n, R)
c <- apply(u, 2, function(x) stats::filter(c(rep(0, length(ar)), x), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))])
y <- yy<-x + c
optfn <- function(n, y, x){
tryCatch({
# Estimate
# check grid
grid.st <- cbind(gr.start, sapply(1:nrow(gr.start), function(i) fUC_opt_ML(gr.start[i, ],
y=y, START = 1,
nulim = c(1/100, 25),
deterministics = FALSE)))
par0 <- grid.st[which.min(grid.st[,5]),-5]
(est <- optim(par=par0, control = list(),
fn = fUC_opt_ML, quiet = TRUE, START = (0.1*n + 1),
y=y, method = "BFGS", nulim = c(1/100, 25), d.int = c(0.5, 2.5),
deterministics = FALSE))
# check for corner solutions: d->0, d->2, nu->1/100, nu->100
j=1
while(est$par[1] < .05 | est$par[1] > 1.95 | exp(est$par[2]) < .05 | exp(est$par[2]) > 24.95){
if(j > 10) break
j=j+1
par0 <- grid.st[order(grid.st[,5]),-5][j , ]
(est <- optim(par=par0,
fn = fUC_opt_ML, quiet = TRUE, d.int = c(0.5, 2.5),
y=y, method = "BFGS", nulim = c(1/100, 25),
deterministics = FALSE, START = 1))
}
par <- est$par
nu  <- exp(par[2])
ar <- est$par[-(1:2)]
#KF <- fUC_comp(y, par[1], nu, ar)
#KF2 <- fUC_comp((1:length(y))^par[1], par[1], nu, ar)
#mu  <- summary(lm(KF$v ~ -1 + KF2$v))$coefficients[1,1]
KS <- fUC_smooth(y, par[1], nu, ar = ar, corr = FALSE)
Rsq <- summary(lm(x ~ KS$x))$r.squared
# Return results
results <- c(par[1], exp(par[2]), ar, Rsq)
names(results) <- c("d", "nu", "ar_1", "ar_2", "Rsq")
return(results)
}, error = function(e) return(rep(NA, 5))
)
}
optfn(n, y[,1], x[,1])
# Simulation:
# Performance of fUC for parameter estimation
#   - High and normal signal to noise ratios
#   - AR plus non-AR
#   - compare d with other nonparametric estimators
gc()
rm(list = ls())
library(fUCpack)
library(dplyr)
library(parallel)
# Wd, etc
setwd("/Users/tobias/Dokumente/Projekte/Filtering unknown persistence/R/code")
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.25, 1.75)
r <- c(1, 5, 10)
R <- 1000
# Strong persistence
ar <- c(-1.6, 0.8)
# define grid
d.grid <- seq(0.75, 1.75, 0.25)
r.grid <- log(c(1, 5, 10))
ar.1.grid <- c(-1.8, -1.7, -1.6, -1.5, -1.4)
ar2.grid  <- c(0.6, 0.7, 0.8, 0.9, 1)
gr.start <- expand.grid(d.grid, r.grid, ar.1.grid, ar2.grid) %>% as.matrix()
gr.start <- gr.start[sapply(1:nrow(gr.start), function(i) toComp(-c(gr.start[i, 3:4]))$stable) ,]
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
i=1
setup <- setups[ i, ]
n <- as.numeric(setup[1])
nu <- as.numeric(setup[3])
d <- as.numeric(setup[2])
cat("Iteration ", i, "\n")
#if(file.exists(file = paste("./MC/MC_2/ML/Sim_R", R, "_n", n, "_d", d, "_nu", nu, "_ar_high.RData", sep=""))) next
set.seed(42)
# Generate the data
x <- frac_diff_multi(matrix(rnorm(n*R, mean=0, sd=1), n, R), -d)
u <- matrix(rnorm(n*R, mean=0, sd=sqrt(nu)), n, R)
c <- apply(u, 2, function(x) stats::filter(c(rep(0, length(ar)), x), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))])
y <- yy<-x + c
optfn <- function(n, y, x){
tryCatch({
# Estimate
# check grid
grid.st <- cbind(gr.start, sapply(1:nrow(gr.start), function(i) fUC_opt_ML(gr.start[i, ],
y=y, START = 1,
nulim = c(1/100, 25),
deterministics = FALSE)))
par0 <- grid.st[which.min(grid.st[,5]),-5]
(est <- optim(par=par0, control = list(),
fn = fUC_opt_ML, quiet = TRUE, START = (0.1*n + 1),
y=y, method = "BFGS", nulim = c(1/100, 25), d.int = c(0.5, 2.5),
deterministics = FALSE))
# check for corner solutions: d->0, d->2, nu->1/100, nu->100
j=1
while(est$par[1] < .05 | est$par[1] > 1.95 | exp(est$par[2]) < .05 | exp(est$par[2]) > 24.95){
if(j > 10) break
j=j+1
par0 <- grid.st[order(grid.st[,5]),-5][j , ]
(est <- optim(par=par0,
fn = fUC_opt_ML, quiet = TRUE, d.int = c(0.5, 2.5),
y=y, method = "BFGS", nulim = c(1/100, 25),
deterministics = FALSE, START = 1))
}
par <- est$par
nu  <- exp(par[2])
ar <- est$par[-(1:2)]
#KF <- fUC_comp(y, par[1], nu, ar)
#KF2 <- fUC_comp((1:length(y))^par[1], par[1], nu, ar)
#mu  <- summary(lm(KF$v ~ -1 + KF2$v))$coefficients[1,1]
KS <- fUC_smooth(y, par[1], nu, ar = ar, corr = FALSE)
Rsq <- summary(lm(x ~ KS$x))$r.squared
# Return results
results <- c(par[1], exp(par[2]), ar, Rsq)
names(results) <- c("d", "nu", "ar_1", "ar_2", "Rsq")
return(results)
}, error = function(e) return(rep(NA, 5))
)
}
optfn(n, y[,1], x[,1])
load("~/Dokumente/Projekte/Filtering unknown persistence/R/code/MC/ML/Sim_R1000_n100_d0.75_nu1_ar_high_corr0.RData")
View(RESULTS)
library(fUCpack)
# Simulation:
# Performance of fUC for parameter estimation
#   - High and normal signal to noise ratios
#   - AR plus non-AR
#   - compare d with other nonparametric estimators
gc()
rm(list = ls())
library(fUCpack)
library(dplyr)
library(parallel)
# Wd, etc
setwd("/Users/tobias/Dokumente/Projekte/Filtering unknown persistence/R/code")
# Settings
n <- c(100, 200, 300)
d <- c(0.75, 1, 1.25, 1.75)
r <- c(1, 5, 10)
R <- 1000
# Strong persistence
ar <- c(-1.6, 0.8)
# define grid
d.grid <- seq(0.75, 1.75, 0.25)
r.grid <- log(c(1, 5, 10))
ar.1.grid <- c(-1.8, -1.7, -1.6, -1.5, -1.4)
ar2.grid  <- c(0.6, 0.7, 0.8, 0.9, 1)
gr.start <- expand.grid(d.grid, r.grid, ar.1.grid, ar2.grid) %>% as.matrix()
gr.start <- gr.start[sapply(1:nrow(gr.start), function(i) toComp(-c(gr.start[i, 3:4]))$stable) ,]
setups <- expand.grid(n, d, r)
colnames(setups) <- c("n", "d", "r")
setups <- setups[order(setups[, "n"]), ]
i=1
setup <- setups[ i, ]
n <- as.numeric(setup[1])
nu <- as.numeric(setup[3])
d <- as.numeric(setup[2])
cat("Iteration ", i, "\n")
#if(file.exists(file = paste("./MC/MC_2/ML/Sim_R", R, "_n", n, "_d", d, "_nu", nu, "_ar_high.RData", sep=""))) next
set.seed(42)
# Generate the data
x <- frac_diff_multi(matrix(rnorm(n*R, mean=0, sd=1), n, R), -d)
u <- matrix(rnorm(n*R, mean=0, sd=sqrt(nu)), n, R)
c <- apply(u, 2, function(x) stats::filter(c(rep(0, length(ar)), x), filter = c(-ar), method = "recursive", sides = 1)[-(1:length(ar))])
y <- yy<-x + c
optfn <- function(n, y, x){
tryCatch({
# Estimate
# check grid
grid.st <- cbind(gr.start, sapply(1:nrow(gr.start), function(i) fUC_opt_ML(gr.start[i, ],
y=y, START = 1,
nulim = c(1/100, 25),
deterministics = FALSE)))
par0 <- grid.st[which.min(grid.st[,5]),-5]
(est <- optim(par=par0, control = list(),
fn = fUC_opt_ML, quiet = TRUE, START = (0.1*n + 1),
y=y, method = "BFGS", nulim = c(1/100, 25), d.int = c(0.5, 2.5),
deterministics = FALSE))
# check for corner solutions: d->0, d->2, nu->1/100, nu->100
j=1
while(est$par[1] < .05 | est$par[1] > 1.95 | exp(est$par[2]) < .05 | exp(est$par[2]) > 24.95){
if(j > 10) break
j=j+1
par0 <- grid.st[order(grid.st[,5]),-5][j , ]
(est <- optim(par=par0,
fn = fUC_opt_ML, quiet = TRUE, d.int = c(0.5, 2.5),
y=y, method = "BFGS", nulim = c(1/100, 25),
deterministics = FALSE, START = 1))
}
par <- est$par
nu  <- exp(par[2])
ar <- est$par[-(1:2)]
#KF <- fUC_comp(y, par[1], nu, ar)
#KF2 <- fUC_comp((1:length(y))^par[1], par[1], nu, ar)
#mu  <- summary(lm(KF$v ~ -1 + KF2$v))$coefficients[1,1]
KS <- fUC_smooth(y, par[1], nu, ar = ar, corr = FALSE)
Rsq <- summary(lm(x ~ KS$x))$r.squared
# Return results
results <- c(par[1], exp(par[2]), ar, Rsq)
names(results) <- c("d", "nu", "ar_1", "ar_2", "Rsq")
return(results)
}, error = function(e) return(rep(NA, 5))
)
}
optfn(n, y[,1], x[,1])
